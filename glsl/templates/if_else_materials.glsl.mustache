#define color_type {{colorType}}
float color2prob(color_type c) { return {{{colorToProb}}}; }

{{#textures}}
uniform sampler2D texture_{{id}};
vec4 map_texture_{{id}}(vec3 pos) {
  vec4 rgba = texture2D(texture_{{id}}, {{{mapping}}});
  return rgba;
}
{{/textures}}

bool get_emission(int which_obj, vec3 pos, out color_type emission) {
  {{#materialEmissions}}
  if (false
    {{#objects}}
    || which_obj == {{id}}
    {{/objects}}) {
    {{#textureId}}
    emission = map_texture_{{textureId}}(pos).{{vectorMember}};
    {{/textureId}}
    {{^textureId}}
    emission = {{value}};
    {{/textureId}}
    return true;
  }
  {{/materialEmissions}}
  return false;
}

{{#properties}}
{{type}} get_{{name}}(int which_obj, vec3 pos) {
  {{#materials}}
  if (false
    {{#objects}}
    || which_obj == {{id}}
    {{/objects}}) {
    {{#textureId}}
    return map_texture_{{textureId}}(pos).{{vectorMember}};
    {{/textureId}}
    {{^textureId}}
    return {{value}};
    {{/textureId}}
  }
  {{/materials}}
  return {{default}};
}
{{/properties}}

#define get_material_id(x) x
